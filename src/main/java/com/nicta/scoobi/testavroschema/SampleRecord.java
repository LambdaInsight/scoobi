/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.nicta.scoobi.testavroschema;  
@SuppressWarnings("all")
/** A sample record. */
@org.apache.avro.specific.AvroGenerated
public class SampleRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SampleRecord\",\"namespace\":\"com.nicta.scoobi.testavroschema\",\"doc\":\"A sample record.\",\"fields\":[{\"name\":\"str\",\"type\":[\"string\",\"null\"]},{\"name\":\"num\",\"type\":\"int\"},{\"name\":\"hash\",\"type\":{\"type\":\"fixed\",\"name\":\"Sha1\",\"size\":20}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence str;
  @Deprecated public int num;
  @Deprecated public com.nicta.scoobi.testavroschema.Sha1 hash;

  /**
   * Default constructor.
   */
  public SampleRecord() {}

  /**
   * All-args constructor.
   */
  public SampleRecord(java.lang.CharSequence str, java.lang.Integer num, com.nicta.scoobi.testavroschema.Sha1 hash) {
    this.str = str;
    this.num = num;
    this.hash = hash;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return str;
    case 1: return num;
    case 2: return hash;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: str = (java.lang.CharSequence)value$; break;
    case 1: num = (java.lang.Integer)value$; break;
    case 2: hash = (com.nicta.scoobi.testavroschema.Sha1)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'str' field.
   */
  public java.lang.CharSequence getStr() {
    return str;
  }

  /**
   * Sets the value of the 'str' field.
   * @param value the value to set.
   */
  public void setStr(java.lang.CharSequence value) {
    this.str = value;
  }

  /**
   * Gets the value of the 'num' field.
   */
  public java.lang.Integer getNum() {
    return num;
  }

  /**
   * Sets the value of the 'num' field.
   * @param value the value to set.
   */
  public void setNum(java.lang.Integer value) {
    this.num = value;
  }

  /**
   * Gets the value of the 'hash' field.
   */
  public com.nicta.scoobi.testavroschema.Sha1 getHash() {
    return hash;
  }

  /**
   * Sets the value of the 'hash' field.
   * @param value the value to set.
   */
  public void setHash(com.nicta.scoobi.testavroschema.Sha1 value) {
    this.hash = value;
  }

  /** Creates a new SampleRecord RecordBuilder */
  public static com.nicta.scoobi.testavroschema.SampleRecord.Builder newBuilder() {
    return new com.nicta.scoobi.testavroschema.SampleRecord.Builder();
  }
  
  /** Creates a new SampleRecord RecordBuilder by copying an existing Builder */
  public static com.nicta.scoobi.testavroschema.SampleRecord.Builder newBuilder(com.nicta.scoobi.testavroschema.SampleRecord.Builder other) {
    return new com.nicta.scoobi.testavroschema.SampleRecord.Builder(other);
  }
  
  /** Creates a new SampleRecord RecordBuilder by copying an existing SampleRecord instance */
  public static com.nicta.scoobi.testavroschema.SampleRecord.Builder newBuilder(com.nicta.scoobi.testavroschema.SampleRecord other) {
    return new com.nicta.scoobi.testavroschema.SampleRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for SampleRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SampleRecord>
    implements org.apache.avro.data.RecordBuilder<SampleRecord> {

    private java.lang.CharSequence str;
    private int num;
    private com.nicta.scoobi.testavroschema.Sha1 hash;

    /** Creates a new Builder */
    private Builder() {
      super(com.nicta.scoobi.testavroschema.SampleRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.nicta.scoobi.testavroschema.SampleRecord.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing SampleRecord instance */
    private Builder(com.nicta.scoobi.testavroschema.SampleRecord other) {
            super(com.nicta.scoobi.testavroschema.SampleRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.str)) {
        this.str = data().deepCopy(fields()[0].schema(), other.str);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.num)) {
        this.num = data().deepCopy(fields()[1].schema(), other.num);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hash)) {
        this.hash = data().deepCopy(fields()[2].schema(), other.hash);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'str' field */
    public java.lang.CharSequence getStr() {
      return str;
    }
    
    /** Sets the value of the 'str' field */
    public com.nicta.scoobi.testavroschema.SampleRecord.Builder setStr(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.str = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'str' field has been set */
    public boolean hasStr() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'str' field */
    public com.nicta.scoobi.testavroschema.SampleRecord.Builder clearStr() {
      str = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'num' field */
    public java.lang.Integer getNum() {
      return num;
    }
    
    /** Sets the value of the 'num' field */
    public com.nicta.scoobi.testavroschema.SampleRecord.Builder setNum(int value) {
      validate(fields()[1], value);
      this.num = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'num' field has been set */
    public boolean hasNum() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'num' field */
    public com.nicta.scoobi.testavroschema.SampleRecord.Builder clearNum() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'hash' field */
    public com.nicta.scoobi.testavroschema.Sha1 getHash() {
      return hash;
    }
    
    /** Sets the value of the 'hash' field */
    public com.nicta.scoobi.testavroschema.SampleRecord.Builder setHash(com.nicta.scoobi.testavroschema.Sha1 value) {
      validate(fields()[2], value);
      this.hash = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'hash' field has been set */
    public boolean hasHash() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'hash' field */
    public com.nicta.scoobi.testavroschema.SampleRecord.Builder clearHash() {
      hash = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public SampleRecord build() {
      try {
        SampleRecord record = new SampleRecord();
        record.str = fieldSetFlags()[0] ? this.str : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.num = fieldSetFlags()[1] ? this.num : (java.lang.Integer) defaultValue(fields()[1]);
        record.hash = fieldSetFlags()[2] ? this.hash : (com.nicta.scoobi.testavroschema.Sha1) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
